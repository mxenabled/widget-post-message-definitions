/**
 * This file is auto-generated by widget-post-message-definitions,
 * DO NOT EDIT.
 *
 * If you need to make changes to the code in this file, you can do so by
 * modifying the definitions found in the widget-post-message-definitions
 * project.
 */

import { UnknownPostMessageError, Metadata, assertMessageProp } from "./lib"

export enum Type {
  Load = "mx/load",
  Ping = "mx/ping",
  Focustrap = "mx/focusTrap",
  ConnectLoaded = "mx/connect/loaded",
  ConnectEntercredentials = "mx/connect/enterCredentials",
  ConnectInstitutionsearch = "mx/connect/institutionSearch",
  ConnectSelectedinstitution = "mx/connect/selectedInstitution",
  ConnectMemberconnected = "mx/connect/memberConnected",
  ConnectConnectedPrimaryaction = "mx/connect/connected/primaryAction",
  ConnectMemberdeleted = "mx/connect/memberDeleted",
  ConnectCreatemembererror = "mx/connect/createMemberError",
  ConnectMemberstatusupdate = "mx/connect/memberStatusUpdate",
  ConnectOautherror = "mx/connect/oauthError",
  ConnectOauthrequested = "mx/connect/oauthRequested",
  ConnectStepchange = "mx/connect/stepChange",
  ConnectSubmitmfa = "mx/connect/submitMFA",
  ConnectUpdatecredentials = "mx/connect/updateCredentials",
  PulseLoad = "mx/pulse/load",
  PulseOverdraftwarningCtaTransferfunds = "mx/pulse/overdraftWarning/cta/transferFunds",
  AccountCreated = "mx/account/created",
}

export const typeLookup: Record<string, Type> = {
  [Type.Load]: Type.Load,
  [Type.Ping]: Type.Ping,
  [Type.Focustrap]: Type.Focustrap,
  "mx/focustrap": Type.Focustrap,
  [Type.ConnectLoaded]: Type.ConnectLoaded,
  [Type.ConnectEntercredentials]: Type.ConnectEntercredentials,
  "mx/connect/entercredentials": Type.ConnectEntercredentials,
  [Type.ConnectInstitutionsearch]: Type.ConnectInstitutionsearch,
  "mx/connect/institutionsearch": Type.ConnectInstitutionsearch,
  [Type.ConnectSelectedinstitution]: Type.ConnectSelectedinstitution,
  "mx/connect/selectedinstitution": Type.ConnectSelectedinstitution,
  [Type.ConnectMemberconnected]: Type.ConnectMemberconnected,
  "mx/connect/memberconnected": Type.ConnectMemberconnected,
  [Type.ConnectConnectedPrimaryaction]: Type.ConnectConnectedPrimaryaction,
  "mx/connect/connected/primaryaction": Type.ConnectConnectedPrimaryaction,
  [Type.ConnectMemberdeleted]: Type.ConnectMemberdeleted,
  "mx/connect/memberdeleted": Type.ConnectMemberdeleted,
  [Type.ConnectCreatemembererror]: Type.ConnectCreatemembererror,
  "mx/connect/createmembererror": Type.ConnectCreatemembererror,
  [Type.ConnectMemberstatusupdate]: Type.ConnectMemberstatusupdate,
  "mx/connect/memberstatusupdate": Type.ConnectMemberstatusupdate,
  [Type.ConnectOautherror]: Type.ConnectOautherror,
  "mx/connect/oautherror": Type.ConnectOautherror,
  [Type.ConnectOauthrequested]: Type.ConnectOauthrequested,
  "mx/connect/oauthrequested": Type.ConnectOauthrequested,
  [Type.ConnectStepchange]: Type.ConnectStepchange,
  "mx/connect/stepchange": Type.ConnectStepchange,
  [Type.ConnectSubmitmfa]: Type.ConnectSubmitmfa,
  "mx/connect/submitmfa": Type.ConnectSubmitmfa,
  [Type.ConnectUpdatecredentials]: Type.ConnectUpdatecredentials,
  "mx/connect/updatecredentials": Type.ConnectUpdatecredentials,
  [Type.PulseLoad]: Type.PulseLoad,
  [Type.PulseOverdraftwarningCtaTransferfunds]: Type.PulseOverdraftwarningCtaTransferfunds,
  "mx/pulse/overdraftwarning/cta/transferfunds": Type.PulseOverdraftwarningCtaTransferfunds,
  [Type.AccountCreated]: Type.AccountCreated,
}


export type LoadPayload = {
  type: Type.Load,
}

export type PingPayload = {
  type: Type.Ping,
  user_guid: string,
  session_guid: string,
}

export type FocustrapPayload = {
  type: Type.Focustrap,
  user_guid: string,
  session_guid: string,
}

export type ConnectLoadedPayload = {
  type: Type.ConnectLoaded,
  user_guid: string,
  session_guid: string,
  initial_step: "search" | "selectMember" | "enterCreds" | "mfa" | "connected" | "loginError" | "disclosure",
}

export type ConnectEntercredentialsPayload = {
  type: Type.ConnectEntercredentials,
  user_guid: string,
  session_guid: string,
  institution: { code: string, guid: string },
}

export type ConnectInstitutionsearchPayload = {
  type: Type.ConnectInstitutionsearch,
  user_guid: string,
  session_guid: string,
  query: string,
}

export type ConnectSelectedinstitutionPayload = {
  type: Type.ConnectSelectedinstitution,
  user_guid: string,
  session_guid: string,
  code: string,
  guid: string,
  name: string,
  url: string,
}

export type ConnectMemberconnectedPayload = {
  type: Type.ConnectMemberconnected,
  user_guid: string,
  session_guid: string,
  member_guid: string,
}

export type ConnectConnectedPrimaryactionPayload = {
  type: Type.ConnectConnectedPrimaryaction,
  user_guid: string,
  session_guid: string,
}

export type ConnectMemberdeletedPayload = {
  type: Type.ConnectMemberdeleted,
  user_guid: string,
  session_guid: string,
  member_guid: string,
}

export type ConnectCreatemembererrorPayload = {
  type: Type.ConnectCreatemembererror,
  user_guid: string,
  session_guid: string,
  institution_guid: string,
  institution_code: string,
}

export type ConnectMemberstatusupdatePayload = {
  type: Type.ConnectMemberstatusupdate,
  user_guid: string,
  session_guid: string,
  member_guid: string,
  connection_status: number,
}

export type ConnectOautherrorPayload = {
  type: Type.ConnectOautherror,
  user_guid: string,
  session_guid: string,
  member_guid: string,
}

export type ConnectOauthrequestedPayload = {
  type: Type.ConnectOauthrequested,
  user_guid: string,
  session_guid: string,
  url: string,
  member_guid: string,
}

export type ConnectStepchangePayload = {
  type: Type.ConnectStepchange,
  user_guid: string,
  session_guid: string,
  previous: string,
  current: string,
}

export type ConnectSubmitmfaPayload = {
  type: Type.ConnectSubmitmfa,
  user_guid: string,
  session_guid: string,
  member_guid: string,
}

export type ConnectUpdatecredentialsPayload = {
  type: Type.ConnectUpdatecredentials,
  user_guid: string,
  session_guid: string,
  member_guid: string,
  institution: { code: string, guid: string },
}

export type PulseLoadPayload = {
  type: Type.PulseLoad,
}

export type PulseOverdraftwarningCtaTransferfundsPayload = {
  type: Type.PulseOverdraftwarningCtaTransferfunds,
  account_guid: string,
  amount: number,
}

export type AccountCreatedPayload = {
  type: Type.AccountCreated,
  guid: string,
}


export type WidgetPayload =
  | LoadPayload
  | PingPayload
  | FocustrapPayload
  | ConnectLoadedPayload
  | ConnectEntercredentialsPayload
  | ConnectInstitutionsearchPayload
  | ConnectSelectedinstitutionPayload
  | ConnectMemberconnectedPayload
  | ConnectConnectedPrimaryactionPayload
  | ConnectMemberdeletedPayload
  | ConnectCreatemembererrorPayload
  | ConnectMemberstatusupdatePayload
  | ConnectOautherrorPayload
  | ConnectOauthrequestedPayload
  | ConnectStepchangePayload
  | ConnectSubmitmfaPayload
  | ConnectUpdatecredentialsPayload
  | PulseLoadPayload
  | PulseOverdraftwarningCtaTransferfundsPayload

export type EntityPayload =
  | AccountCreatedPayload

export type Payload =
  | WidgetPayload
  | EntityPayload

export function buildPayload(type: Type, metadata: Metadata): Payload {
  switch (type) {
    case Type.Load:

      return {
        type,
      }

    case Type.Ping:
      assertMessageProp(metadata, "mx/ping", "user_guid", "string")
      assertMessageProp(metadata, "mx/ping", "session_guid", "string")

      return {
        type,
        user_guid: metadata.user_guid as string,
        session_guid: metadata.session_guid as string,
      }

    case Type.Focustrap:
      assertMessageProp(metadata, "mx/focusTrap", "user_guid", "string")
      assertMessageProp(metadata, "mx/focusTrap", "session_guid", "string")

      return {
        type,
        user_guid: metadata.user_guid as string,
        session_guid: metadata.session_guid as string,
      }

    case Type.ConnectLoaded:
      assertMessageProp(metadata, "mx/connect/loaded", "user_guid", "string")
      assertMessageProp(metadata, "mx/connect/loaded", "session_guid", "string")
      assertMessageProp(metadata, "mx/connect/loaded", "initial_step", ["search", "selectMember", "enterCreds", "mfa", "connected", "loginError", "disclosure"])

      return {
        type,
        user_guid: metadata.user_guid as string,
        session_guid: metadata.session_guid as string,
        initial_step: metadata.initial_step as "search" | "selectMember" | "enterCreds" | "mfa" | "connected" | "loginError" | "disclosure",
      }

    case Type.ConnectEntercredentials:
      assertMessageProp(metadata, "mx/connect/enterCredentials", "user_guid", "string")
      assertMessageProp(metadata, "mx/connect/enterCredentials", "session_guid", "string")
      assertMessageProp(metadata, "mx/connect/enterCredentials", "institution", { code: "string", guid: "string" })

      return {
        type,
        user_guid: metadata.user_guid as string,
        session_guid: metadata.session_guid as string,
        institution: metadata.institution as { code: string, guid: string },
      }

    case Type.ConnectInstitutionsearch:
      assertMessageProp(metadata, "mx/connect/institutionSearch", "user_guid", "string")
      assertMessageProp(metadata, "mx/connect/institutionSearch", "session_guid", "string")
      assertMessageProp(metadata, "mx/connect/institutionSearch", "query", "string")

      return {
        type,
        user_guid: metadata.user_guid as string,
        session_guid: metadata.session_guid as string,
        query: metadata.query as string,
      }

    case Type.ConnectSelectedinstitution:
      assertMessageProp(metadata, "mx/connect/selectedInstitution", "user_guid", "string")
      assertMessageProp(metadata, "mx/connect/selectedInstitution", "session_guid", "string")
      assertMessageProp(metadata, "mx/connect/selectedInstitution", "code", "string")
      assertMessageProp(metadata, "mx/connect/selectedInstitution", "guid", "string")
      assertMessageProp(metadata, "mx/connect/selectedInstitution", "name", "string")
      assertMessageProp(metadata, "mx/connect/selectedInstitution", "url", "string")

      return {
        type,
        user_guid: metadata.user_guid as string,
        session_guid: metadata.session_guid as string,
        code: metadata.code as string,
        guid: metadata.guid as string,
        name: metadata.name as string,
        url: metadata.url as string,
      }

    case Type.ConnectMemberconnected:
      assertMessageProp(metadata, "mx/connect/memberConnected", "user_guid", "string")
      assertMessageProp(metadata, "mx/connect/memberConnected", "session_guid", "string")
      assertMessageProp(metadata, "mx/connect/memberConnected", "member_guid", "string")

      return {
        type,
        user_guid: metadata.user_guid as string,
        session_guid: metadata.session_guid as string,
        member_guid: metadata.member_guid as string,
      }

    case Type.ConnectConnectedPrimaryaction:
      assertMessageProp(metadata, "mx/connect/connected/primaryAction", "user_guid", "string")
      assertMessageProp(metadata, "mx/connect/connected/primaryAction", "session_guid", "string")

      return {
        type,
        user_guid: metadata.user_guid as string,
        session_guid: metadata.session_guid as string,
      }

    case Type.ConnectMemberdeleted:
      assertMessageProp(metadata, "mx/connect/memberDeleted", "user_guid", "string")
      assertMessageProp(metadata, "mx/connect/memberDeleted", "session_guid", "string")
      assertMessageProp(metadata, "mx/connect/memberDeleted", "member_guid", "string")

      return {
        type,
        user_guid: metadata.user_guid as string,
        session_guid: metadata.session_guid as string,
        member_guid: metadata.member_guid as string,
      }

    case Type.ConnectCreatemembererror:
      assertMessageProp(metadata, "mx/connect/createMemberError", "user_guid", "string")
      assertMessageProp(metadata, "mx/connect/createMemberError", "session_guid", "string")
      assertMessageProp(metadata, "mx/connect/createMemberError", "institution_guid", "string")
      assertMessageProp(metadata, "mx/connect/createMemberError", "institution_code", "string")

      return {
        type,
        user_guid: metadata.user_guid as string,
        session_guid: metadata.session_guid as string,
        institution_guid: metadata.institution_guid as string,
        institution_code: metadata.institution_code as string,
      }

    case Type.ConnectMemberstatusupdate:
      assertMessageProp(metadata, "mx/connect/memberStatusUpdate", "user_guid", "string")
      assertMessageProp(metadata, "mx/connect/memberStatusUpdate", "session_guid", "string")
      assertMessageProp(metadata, "mx/connect/memberStatusUpdate", "member_guid", "string")
      assertMessageProp(metadata, "mx/connect/memberStatusUpdate", "connection_status", "number")

      return {
        type,
        user_guid: metadata.user_guid as string,
        session_guid: metadata.session_guid as string,
        member_guid: metadata.member_guid as string,
        connection_status: metadata.connection_status as number,
      }

    case Type.ConnectOautherror:
      assertMessageProp(metadata, "mx/connect/oauthError", "user_guid", "string")
      assertMessageProp(metadata, "mx/connect/oauthError", "session_guid", "string")
      assertMessageProp(metadata, "mx/connect/oauthError", "member_guid", "string")

      return {
        type,
        user_guid: metadata.user_guid as string,
        session_guid: metadata.session_guid as string,
        member_guid: metadata.member_guid as string,
      }

    case Type.ConnectOauthrequested:
      assertMessageProp(metadata, "mx/connect/oauthRequested", "user_guid", "string")
      assertMessageProp(metadata, "mx/connect/oauthRequested", "session_guid", "string")
      assertMessageProp(metadata, "mx/connect/oauthRequested", "url", "string")
      assertMessageProp(metadata, "mx/connect/oauthRequested", "member_guid", "string")

      return {
        type,
        user_guid: metadata.user_guid as string,
        session_guid: metadata.session_guid as string,
        url: metadata.url as string,
        member_guid: metadata.member_guid as string,
      }

    case Type.ConnectStepchange:
      assertMessageProp(metadata, "mx/connect/stepChange", "user_guid", "string")
      assertMessageProp(metadata, "mx/connect/stepChange", "session_guid", "string")
      assertMessageProp(metadata, "mx/connect/stepChange", "previous", "string")
      assertMessageProp(metadata, "mx/connect/stepChange", "current", "string")

      return {
        type,
        user_guid: metadata.user_guid as string,
        session_guid: metadata.session_guid as string,
        previous: metadata.previous as string,
        current: metadata.current as string,
      }

    case Type.ConnectSubmitmfa:
      assertMessageProp(metadata, "mx/connect/submitMFA", "user_guid", "string")
      assertMessageProp(metadata, "mx/connect/submitMFA", "session_guid", "string")
      assertMessageProp(metadata, "mx/connect/submitMFA", "member_guid", "string")

      return {
        type,
        user_guid: metadata.user_guid as string,
        session_guid: metadata.session_guid as string,
        member_guid: metadata.member_guid as string,
      }

    case Type.ConnectUpdatecredentials:
      assertMessageProp(metadata, "mx/connect/updateCredentials", "user_guid", "string")
      assertMessageProp(metadata, "mx/connect/updateCredentials", "session_guid", "string")
      assertMessageProp(metadata, "mx/connect/updateCredentials", "member_guid", "string")
      assertMessageProp(metadata, "mx/connect/updateCredentials", "institution", { code: "string", guid: "string" })

      return {
        type,
        user_guid: metadata.user_guid as string,
        session_guid: metadata.session_guid as string,
        member_guid: metadata.member_guid as string,
        institution: metadata.institution as { code: string, guid: string },
      }

    case Type.PulseLoad:

      return {
        type,
      }

    case Type.PulseOverdraftwarningCtaTransferfunds:
      assertMessageProp(metadata, "mx/pulse/overdraftWarning/cta/transferFunds", "account_guid", "string")
      assertMessageProp(metadata, "mx/pulse/overdraftWarning/cta/transferFunds", "amount", "number")

      return {
        type,
        account_guid: metadata.account_guid as string,
        amount: metadata.amount as number,
      }

    case Type.AccountCreated:
      assertMessageProp(metadata, "mx/account/created", "guid", "string")

      return {
        type,
        guid: metadata.guid as string,
      }

    default:
      throw new UnknownPostMessageError(type)
  }
}