/**
 * This file is auto-generated by widget-post-message-definitions,
 * DO NOT EDIT.
 *
 * If you need to make changes to the code in this file, you can do so by
 * modifying the definitions found in the widget-post-message-definitions
 * project.
 */

public protocol Event: Codable {}

/** Payloads **/

public enum WidgetEvent {
    public struct Load: Event {
    }
    public struct Ping: Event {
        public var userGuid: String
        public var sessionGuid: String
    }
    public struct Navigation: Event {
        public var userGuid: String
        public var sessionGuid: String
        public var didGoBack: Bool
    }
    public struct FocusTrap: Event {
        public var userGuid: String
        public var sessionGuid: String
    }
}

public enum ClientEvent {
    public struct OAuthComplete: Event {
        public var url: String
    }
}

public enum ConnectWidgetEvent {
    public struct Loaded: Event {
        public var userGuid: String
        public var sessionGuid: String
        public var initialStep: ConnectLoadedInitialStep
    }
    public struct EnterCredentials: Event {
        public var userGuid: String
        public var sessionGuid: String
        public var institution: ConnectEnterCredentialsInstitution
    }
    public struct InstitutionSearch: Event {
        public var userGuid: String
        public var sessionGuid: String
        public var query: String
    }
    public struct SelectedInstitution: Event {
        public var userGuid: String
        public var sessionGuid: String
        public var code: String
        public var guid: String
        public var name: String
        public var url: String
    }
    public struct MemberConnected: Event {
        public var userGuid: String
        public var sessionGuid: String
        public var memberGuid: String
    }
    public struct ConnectedPrimaryAction: Event {
        public var userGuid: String
        public var sessionGuid: String
    }
    public struct MemberDeleted: Event {
        public var userGuid: String
        public var sessionGuid: String
        public var memberGuid: String
    }
    public struct CreateMemberError: Event {
        public var userGuid: String
        public var sessionGuid: String
        public var institutionGuid: String
        public var institutionCode: String
    }
    public struct MemberStatusUpdate: Event {
        public var userGuid: String
        public var sessionGuid: String
        public var memberGuid: String
        public var connectionStatus: Double
    }
    public struct OAuthError: Event {
        public var userGuid: String
        public var sessionGuid: String
        public var memberGuid: String?
    }
    public struct OAuthRequested: Event {
        public var userGuid: String
        public var sessionGuid: String
        public var url: String
        public var memberGuid: String
    }
    public struct StepChange: Event {
        public var userGuid: String
        public var sessionGuid: String
        public var previous: String
        public var current: String
    }
    public struct SubmitMFA: Event {
        public var userGuid: String
        public var sessionGuid: String
        public var memberGuid: String
    }
    public struct UpdateCredentials: Event {
        public var userGuid: String
        public var sessionGuid: String
        public var memberGuid: String
        public var institution: ConnectUpdateCredentialsInstitution
    }
}

public enum PulseWidgetEvent {
    public struct OverdraftWarningCtaTransferFunds: Event {
        public var accountGuid: String
        public var amount: Double
    }
}

public enum AccountEvent {
    public struct Created: Event {
        public var guid: String
    }
}

public enum ConnectLoadedInitialStep: String, Codable {
    case search
    case selectMember
    case enterCreds
    case mfa
    case connected
    case loginError
    case disclosure
}

public struct ConnectEnterCredentialsInstitution: Codable {
    public let code: String
    public let guid: String
}

public struct ConnectUpdateCredentialsInstitution: Codable {
    public let code: String
    public let guid: String
}

/** Delegates **/

public protocol WidgetEventDelegate: NSObjectProtocol {
    func widgetEvent(_ payload: Event)
    func widgetEvent(_ payload: WidgetEvent.Load)
    func widgetEvent(_ payload: WidgetEvent.Ping)
    func widgetEvent(_ payload: WidgetEvent.Navigation)
    func widgetEvent(_ payload: WidgetEvent.FocusTrap)
}

public extension WidgetEventDelegate {
    func widgetEvent(_ payload: Event) {}
    func widgetEvent(_: WidgetEvent.Load) {}
    func widgetEvent(_: WidgetEvent.Ping) {}
    func widgetEvent(_: WidgetEvent.Navigation) {}
    func widgetEvent(_: WidgetEvent.FocusTrap) {}
}

public protocol ConnectWidgetEventDelegate: WidgetEventDelegate {
    func widgetEvent(_ payload: ConnectWidgetEvent.Loaded)
    func widgetEvent(_ payload: ConnectWidgetEvent.EnterCredentials)
    func widgetEvent(_ payload: ConnectWidgetEvent.InstitutionSearch)
    func widgetEvent(_ payload: ConnectWidgetEvent.SelectedInstitution)
    func widgetEvent(_ payload: ConnectWidgetEvent.MemberConnected)
    func widgetEvent(_ payload: ConnectWidgetEvent.ConnectedPrimaryAction)
    func widgetEvent(_ payload: ConnectWidgetEvent.MemberDeleted)
    func widgetEvent(_ payload: ConnectWidgetEvent.CreateMemberError)
    func widgetEvent(_ payload: ConnectWidgetEvent.MemberStatusUpdate)
    func widgetEvent(_ payload: ConnectWidgetEvent.OAuthError)
    func widgetEvent(_ payload: ConnectWidgetEvent.OAuthRequested)
    func widgetEvent(_ payload: ConnectWidgetEvent.StepChange)
    func widgetEvent(_ payload: ConnectWidgetEvent.SubmitMFA)
    func widgetEvent(_ payload: ConnectWidgetEvent.UpdateCredentials)
}

public extension ConnectWidgetEventDelegate {
    func widgetEvent(_: ConnectWidgetEvent.Loaded) {}
    func widgetEvent(_: ConnectWidgetEvent.EnterCredentials) {}
    func widgetEvent(_: ConnectWidgetEvent.InstitutionSearch) {}
    func widgetEvent(_: ConnectWidgetEvent.SelectedInstitution) {}
    func widgetEvent(_: ConnectWidgetEvent.MemberConnected) {}
    func widgetEvent(_: ConnectWidgetEvent.ConnectedPrimaryAction) {}
    func widgetEvent(_: ConnectWidgetEvent.MemberDeleted) {}
    func widgetEvent(_: ConnectWidgetEvent.CreateMemberError) {}
    func widgetEvent(_: ConnectWidgetEvent.MemberStatusUpdate) {}
    func widgetEvent(_: ConnectWidgetEvent.OAuthError) {}
    func widgetEvent(_: ConnectWidgetEvent.OAuthRequested) {}
    func widgetEvent(_: ConnectWidgetEvent.StepChange) {}
    func widgetEvent(_: ConnectWidgetEvent.SubmitMFA) {}
    func widgetEvent(_: ConnectWidgetEvent.UpdateCredentials) {}
}

public protocol PulseWidgetEventDelegate: WidgetEventDelegate {
    func widgetEvent(_ payload: PulseWidgetEvent.OverdraftWarningCtaTransferFunds)
}

public extension PulseWidgetEventDelegate {
    func widgetEvent(_: PulseWidgetEvent.OverdraftWarningCtaTransferFunds) {}
}

/** Dispatchers **/

protocol Dispatcher {
    func dispatch(_: URL)
}

extension Dispatcher {
    func extractMetadata(_ url: URL) -> Data? {
        return URLComponents(url: url, resolvingAgainstBaseURL: false)?
            .queryItems?.first(where: { item in item.name == "metadata" })?
            .value?.data(using: .utf8)
    }

    func decode<T>(_ typ: T.Type, _ data: Data) throws -> T where T: Decodable {
        let decoder = JSONDecoder()
        decoder.keyDecodingStrategy = .convertFromSnakeCase
        return try decoder.decode(typ, from: data)
    }
}

class WidgetEventDispatcher: Dispatcher {
    let delegate: WidgetEventDelegate

    init(_ delegate: WidgetEventDelegate) {
        self.delegate = delegate
    }

    func dispatch(_ url: URL) {
        guard let event = parse(url) else {
            return
        }

        delegate.widgetEvent(event)

        switch event {
        case let event as WidgetEvent.Load:
            delegate.widgetEvent(event)
        case let event as WidgetEvent.Ping:
            delegate.widgetEvent(event)
        case let event as WidgetEvent.Navigation:
            delegate.widgetEvent(event)
        case let event as WidgetEvent.FocusTrap:
            delegate.widgetEvent(event)
        default:
            return
        }
    }

    func parse(_ url: URL) -> Event? {
        guard let metadata = extractMetadata(url) else {
            return .none
        }

        switch (url.host, url.path) {
        case ("load", ""):
            return try? decode(WidgetEvent.Load.self, metadata)
        case ("ping", ""):
            return try? decode(WidgetEvent.Ping.self, metadata)
        case ("navigation", ""):
            return try? decode(WidgetEvent.Navigation.self, metadata)
        case ("focusTrap", ""):
            return try? decode(WidgetEvent.FocusTrap.self, metadata)
        default:
            return .none
        }
    }
}

class ConnectWidgetEventDispatcher: Dispatcher {
    let delegate: ConnectWidgetEventDelegate

    init(_ delegate: ConnectWidgetEventDelegate) {
        self.delegate = delegate
    }

    func dispatch(_ url: URL) {
        guard let event = parse(url) else {
            return
        }

        delegate.widgetEvent(event)

        switch event {
        case let event as WidgetEvent.Load:
            delegate.widgetEvent(event)
        case let event as WidgetEvent.Ping:
            delegate.widgetEvent(event)
        case let event as WidgetEvent.Navigation:
            delegate.widgetEvent(event)
        case let event as WidgetEvent.FocusTrap:
            delegate.widgetEvent(event)
        case let event as ConnectWidgetEvent.Loaded:
            delegate.widgetEvent(event)
        case let event as ConnectWidgetEvent.EnterCredentials:
            delegate.widgetEvent(event)
        case let event as ConnectWidgetEvent.InstitutionSearch:
            delegate.widgetEvent(event)
        case let event as ConnectWidgetEvent.SelectedInstitution:
            delegate.widgetEvent(event)
        case let event as ConnectWidgetEvent.MemberConnected:
            delegate.widgetEvent(event)
        case let event as ConnectWidgetEvent.ConnectedPrimaryAction:
            delegate.widgetEvent(event)
        case let event as ConnectWidgetEvent.MemberDeleted:
            delegate.widgetEvent(event)
        case let event as ConnectWidgetEvent.CreateMemberError:
            delegate.widgetEvent(event)
        case let event as ConnectWidgetEvent.MemberStatusUpdate:
            delegate.widgetEvent(event)
        case let event as ConnectWidgetEvent.OAuthError:
            delegate.widgetEvent(event)
        case let event as ConnectWidgetEvent.OAuthRequested:
            delegate.widgetEvent(event)
        case let event as ConnectWidgetEvent.StepChange:
            delegate.widgetEvent(event)
        case let event as ConnectWidgetEvent.SubmitMFA:
            delegate.widgetEvent(event)
        case let event as ConnectWidgetEvent.UpdateCredentials:
            delegate.widgetEvent(event)
        default:
            return
        }
    }

    func parse(_ url: URL) -> Event? {
        guard let metadata = extractMetadata(url) else {
            return .none
        }

        switch (url.host, url.path) {
        case ("load", ""):
            return try? decode(WidgetEvent.Load.self, metadata)
        case ("ping", ""):
            return try? decode(WidgetEvent.Ping.self, metadata)
        case ("navigation", ""):
            return try? decode(WidgetEvent.Navigation.self, metadata)
        case ("focusTrap", ""):
            return try? decode(WidgetEvent.FocusTrap.self, metadata)
        case ("connect", "/loaded"):
            return try? decode(ConnectWidgetEvent.Loaded.self, metadata)
        case ("connect", "/enterCredentials"):
            return try? decode(ConnectWidgetEvent.EnterCredentials.self, metadata)
        case ("connect", "/institutionSearch"):
            return try? decode(ConnectWidgetEvent.InstitutionSearch.self, metadata)
        case ("connect", "/selectedInstitution"):
            return try? decode(ConnectWidgetEvent.SelectedInstitution.self, metadata)
        case ("connect", "/memberConnected"):
            return try? decode(ConnectWidgetEvent.MemberConnected.self, metadata)
        case ("connect", "/connected/primaryAction"):
            return try? decode(ConnectWidgetEvent.ConnectedPrimaryAction.self, metadata)
        case ("connect", "/memberDeleted"):
            return try? decode(ConnectWidgetEvent.MemberDeleted.self, metadata)
        case ("connect", "/createMemberError"):
            return try? decode(ConnectWidgetEvent.CreateMemberError.self, metadata)
        case ("connect", "/memberStatusUpdate"):
            return try? decode(ConnectWidgetEvent.MemberStatusUpdate.self, metadata)
        case ("connect", "/oauthError"):
            return try? decode(ConnectWidgetEvent.OAuthError.self, metadata)
        case ("connect", "/oauthRequested"):
            return try? decode(ConnectWidgetEvent.OAuthRequested.self, metadata)
        case ("connect", "/stepChange"):
            return try? decode(ConnectWidgetEvent.StepChange.self, metadata)
        case ("connect", "/submitMFA"):
            return try? decode(ConnectWidgetEvent.SubmitMFA.self, metadata)
        case ("connect", "/updateCredentials"):
            return try? decode(ConnectWidgetEvent.UpdateCredentials.self, metadata)
        default:
            return .none
        }
    }
}

class PulseWidgetEventDispatcher: Dispatcher {
    let delegate: PulseWidgetEventDelegate

    init(_ delegate: PulseWidgetEventDelegate) {
        self.delegate = delegate
    }

    func dispatch(_ url: URL) {
        guard let event = parse(url) else {
            return
        }

        delegate.widgetEvent(event)

        switch event {
        case let event as WidgetEvent.Load:
            delegate.widgetEvent(event)
        case let event as WidgetEvent.Ping:
            delegate.widgetEvent(event)
        case let event as WidgetEvent.Navigation:
            delegate.widgetEvent(event)
        case let event as WidgetEvent.FocusTrap:
            delegate.widgetEvent(event)
        case let event as PulseWidgetEvent.OverdraftWarningCtaTransferFunds:
            delegate.widgetEvent(event)
        default:
            return
        }
    }

    func parse(_ url: URL) -> Event? {
        guard let metadata = extractMetadata(url) else {
            return .none
        }

        switch (url.host, url.path) {
        case ("load", ""):
            return try? decode(WidgetEvent.Load.self, metadata)
        case ("ping", ""):
            return try? decode(WidgetEvent.Ping.self, metadata)
        case ("navigation", ""):
            return try? decode(WidgetEvent.Navigation.self, metadata)
        case ("focusTrap", ""):
            return try? decode(WidgetEvent.FocusTrap.self, metadata)
        case ("pulse", "/overdraftWarning/cta/transferFunds"):
            return try? decode(PulseWidgetEvent.OverdraftWarningCtaTransferFunds.self, metadata)
        default:
            return .none
        }
    }
}
